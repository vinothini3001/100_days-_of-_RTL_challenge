module seq_detection(
    input  clk,
    input  reset,   
    input  din,
    output reg dout 
);

    // State encoding
    parameter S0 = 3'b000,  
              S1 = 3'b001,
              S2 = 3'b010,  
              S3 = 3'b011,  
              S4 = 3'b100;  

    reg [2:0] state, next_state;

    // State register (synchronous reset)
    always @(posedge clk) begin
        if (reset)
            state <= S0;
        else
            state <= next_state;
    end

    // Next-state logic
    always @(*) begin
        next_state = S0; // default
        case (state)
            S0: next_state = (din) ? S1 : S0;
            S1: next_state = (din) ? S1 : S2;
            S2: next_state = (din) ? S3 : S0;
            S3: next_state = (din) ? S4 : S2;
            S4: next_state = (din) ? S1 : S2; 
            default: next_state = S0;
        endcase
    end

    // Output logic (Moore)
    always @(*) begin
        dout = 1'b0; // default
        case (state)
            S4: dout = 1'b1;
        endcase
    end

endmodule
