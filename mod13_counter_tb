module mod13binaryupcounter_tb;

		// Inputs
	reg clk;
	reg rst;
	reg load;
	reg [3:0] data;

	// Outputs
	wire [3:0] count;

	// Instantiate the Unit Under Test (UUT)
mod13binaryupcounter DUT (
		.clk(clk), 
		.rst(rst), 
		.load(load), 
		.data(data), 
		.count(count)
	);

	initial begin
		// Initialize Inputs
		clk = 0;
		rst = 0;
		load = 0;
		data = 0;		

		// Wait 100 ns for global reset to finish
		#100;
        
		// Add stimulus here

	end
	parameter cycle=10;
	always
	begin
	#(cycle/2);
	clk=1'b0;
	#(cycle/2);
	clk=1'b1;
end
	task rst_t();
	begin
	@(negedge clk);
	rst=1'b1;
	@(negedge clk);
	rst=1'b0;
	end
	endtask
	task load_t(input l,input [3:0]d);
	begin
	@(negedge clk);
	load=l;
	data=d;
	end;
	endtask
	initial
	begin
	rst_t;
	#100;
	load_t(1'b1,4'd13);
	load_t(1'b0,4'd13);
	#200;
	$finish;
	end
	initial
	$monitor("data=%b,clk=%b,rst=%b,load=%b,count=%b",data,clk,load,rst,count);
	endmodule
